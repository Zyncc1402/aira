generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  email            String    @unique
  emailVerified    DateTime? @map("email_verified")
  image            String?
  password         String?
  phone            String?
  cart             Cart?
  usingSocialLogin Boolean   @default(true)
  role             String    @default("Client")
  reviews          reviews[]
  wishlist         Wishlist?
  address          address[]
  orders           order[]
  accounts         Account[]
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([phone, email])
}

model address {
  id       String  @id @default(auto()) @map("_id") @db.ObjectId
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String  @db.ObjectId
  name     String
  email    String
  phone    String
  address1 String
  address2 String
  state    String
  zipcode  Int
  landmark String
  order    order[]
}

model Wishlist {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String          @unique @db.ObjectId
  productId     String          @db.ObjectId
  product       Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  WishlistItems WishlistItems[]
}

model WishlistItems {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  wishlistId String   @db.ObjectId
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)
  productId  String   @db.ObjectId
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Cart {
  id     String      @id @default(auto()) @map("_id") @db.ObjectId
  user   User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String      @unique @db.ObjectId
  items  CartItems[]
}

model CartItems {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cartId    String  @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size      String
  quantity  Int     @default(1)
}

model Product {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  description   String
  price         Int
  images        String[]
  salePrice     Int?
  category      String
  isArchived    Boolean         @default(false)
  isFeatured    Boolean?        @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  CartItems     CartItems[]
  quantity      quantity?
  color         String[]
  fabric        String?
  transparency  String?
  weavePattern  String?
  fit           String?
  reviews       reviews[]
  WishlistItems WishlistItems[]
  Wishlist      Wishlist[]
  order         order[]
}

model reviews {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  productId   String   @db.ObjectId
  product     Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  title       String
  description String
  images      String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model quantity {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  productId String  @unique @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  sm        Int     @default(0)
  md        Int     @default(0)
  lg        Int     @default(0)
  xl        Int     @default(0)
}

model order {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  orderId        String   @unique
  transactionId  String
  userId         String   @db.ObjectId
  user           User     @relation(fields: [userId], references: [id])
  productId      String   @db.ObjectId
  product        Product  @relation(fields: [productId], references: [id])
  title          String
  image          String
  price          Int
  category       String
  size           String
  quantity       Int
  paymentSuccess Boolean  @default(false)
  createdAt      DateTime @default(now())
  addressId      String?  @db.ObjectId
  address        address? @relation(fields: [addressId], references: [id])
}
